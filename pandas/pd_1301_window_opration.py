import numpy as np
import pandas as pd
import warnings
import matplotlib.pyplot as plt
import glob
import os
# import jinja2

from io import StringIO
from io import BytesIO


input_file = 'E:/bat/input_files/sales_2013.xlsx'
lx_test = 'E:/bat/input_files/split_mpos_less.xlsx'
xls_file = 'E:/bat/input_files/sales_2013.xls'
m_file = 'E:/bat/input_files/winequality-red.csv'
big_file = 'E:/bat/input_files/dq_split_file.xlsx'
team_file = 'E:/bat/input_files/team.xlsx'
csv_file = 'E:/bat/input_files/sales_january_2014.csv'
csv_feb_file = 'E:/bat/input_files/sales_february_2014.csv'
multindex_file = 'E:/bat/input_files/pandas_out_20240509042.xlsx'


path = 'E:/bat/output_files/pandas_read_csv_20240118.csv'
# df1.to_excel('E:/bat/output_files/pandas_out_20240510053.xlsx')

# TODO 忽略特定的警告 | 当遇到 openpyxl 中的 UserWarning 类型的警告时，它们将不会被打印出来。
warnings.filterwarnings('ignore',category=UserWarning,module='openpyxl')

print()
print('------------------------------------------------------------')
print('第13章 Pandas窗口计算')
print('\t13.1 窗口计算')
# update20240530
'''
第五部分 时序数据分析

时序数据即时间序列数据，是按一定的时间尺度及顺序记录的数据。
通过时序数据，我们可以发现样本的特征和发展变化规律，进而进行样本以外的预测。

本部分主要介绍Pandas中对于时间类型数据的处理和分析，
包括固定时间、时长、周期、时间偏移等的表示方法、查询、计算和格式处理，
以及时区转换、重采样、工作日和工作时间的处理方法。
此外，本部分还介绍了在时序数据处理中常用的窗口计算。

如果业务呈现周期性变化，就不能以最小数据单元进行分析了，而需要按照这个周期产生稳定的趋势数据再进行分析，
这就会用到窗口计算。
Pandas提供几种窗口函数，如移动窗口函数rolling()、扩展窗口函数expanding()和指数加权移动ewm()，
同时可在此基础上调用适合的统计函数，如求和、中位数、均值、协方差、方差、相关性等。
'''
# 小节注释
'''
本节介绍窗口计算的一些概念和原理，帮助大家理解什么是窗口计算，窗口计算是如何运作的，以及它有哪些实际用途。

▶ 以下是一些具体的使用方法举例：
'''
print()
print('------------------------------------------------------------')
print('\t13.1.1 理解窗口计算')

'''
所谓窗口，就是在一个数列中，选择一部分数据所形成的一个数据区间。
按照一定的规则产生很多窗口，对每个窗口施加计算得到的结果集成为一个新的数列，这个过程就是窗口计算。
'''

print()
print('------------------------------------------------------------')
print('\t13.1.2 移动窗口')

'''
移动窗口rolling()与groupby很像，但并没有固定的分组，而是创建了一个按一定移动位（如10天）移动的移动窗口对象。
我们再对每个对象进行统计操作。
一个数据会参与到多个窗口（集合、分组）中，而groupby中的一个值只能在一个组中。

'''

print()
print('------------------------------------------------------------')
print('\t13.1.3 扩展窗口')

'''
“扩展”（expanding）是从数据（大多情况下是时间）的起始处开始窗口，
增加窗口直到指定的大小。一般所有的数据都会参与所有窗口。

图13-3演示了一个典型的扩展窗口，它设置一个最小起始窗口，然后逐个向后扩展，实现类似累加的效果。
'''

print()
print('------------------------------------------------------------')
print('\t13.1.4 指数加权移动')
'''
在上述两个统计方法中，分组中的所有数值的权重都是一样的，
而指数加权移动（exponential weighted moving）对分组中的数据给予不同的权重，用于后面的计算中。

机器学习中的重要算法梯度下降法就是计算了梯度的指数加权平均数，
并以此来更新权重，这种方法的运行速度几乎总是快于标准的梯度下降算法。

Pandas提供了ewm()来实现指数加权移动，不过它在日常分析中使用较少，本书不做过多介绍。

'''

'''
13.1.5 小结
窗口计算在实际业务中有广泛的使用场景，特别是一些时序数据中，
如股票波动、气温及气候变化、生物信息研究、互联网用户行为分析等。

了解了以上基础概念，接下来我们就开始用Pandas实现这些操作。
'''

print()
print('------------------------------------------------------------')
print('第13章 Pandas窗口计算')
print('\t13.2 窗口计算')
# update20240530
'''
s.rolling()是移动窗口函数，此函数可以应用于一系列数据，指定参数window=n，并在其上调用适合的统计函数。
'''
# 小节注释
'''
本节介绍窗口计算的一些概念和原理，帮助大家理解什么是窗口计算，窗口计算是如何运作的，以及它有哪些实际用途。

▶ 以下是一些具体的使用方法举例：
'''
print()
print('------------------------------------------------------------')
print('\t13.2.1 理解窗口计算')

'''我们先使用s.rolling()做一下移动窗口操作：'''
s = pd.Series(range(1, 7))
print(s)

print('# 移动窗口')
print(s.rolling(2).sum())  # 当前行和上一行累加，上一行不存在 则结果为空值！
# 0     NaN
# 1     3.0
# 2     5.0
# 3     7.0
# 4     9.0
# 5    11.0
# dtype: float64

print()
print('------------------------------------------------------------')
print('\t13.2.2 基本语法')

'''
s.rolling()的语法如下：
# 语法
df.rolling(window, min_periods=None,
            center=False, win_type=None,
            on=None, axis=0, closed=None)

它支持以下参数。
window：必传，如果使用int，可以表示窗口的大小；如果是offset类型，表示时间数据中窗口按此时间偏移量设定大小。
min_periods：每个窗口的最小数据，小于此值窗口的输出值为NaN，offset情况下，默认为1。默认情况下此值取窗口的大小。
win_type：窗口的类型，默认为加权平均，支持非常丰富的窗口函数，
            如boxcar、triang、blackman、hamming、bartlett、
            parzen、bohman、blackmanharris、nuttall、barthann、
            kaiser(beta)、gaussian(std)、general_gaussian (power, width)、
            slepian (width)、exponential (tau)等。
            具体算法可参考SciPy库的官方文档：https://docs.scipy.org/doc/scipy/reference/signal.windows.html。
on：可选参数，对于DataFrame要作为窗口的列。
axis：计算的轴方向。
closed：窗口的开闭区间定义，支持'right'、'left、'both'或'neither'。对于offset类型，默认是左开右闭，默认为right。
'''

print()
print('------------------------------------------------------------')
print('\t13.2.3 移动窗口使用')

# 数据
df = pd.DataFrame(np.random.randn(30, 4),
                  index=pd.date_range('10/1/2020', periods=30),
                  columns=['A', 'B', 'C', 'D'])
# print(df)
#                    A         B         C         D
# 2020-10-01  1.718881 -1.175391 -1.563521  0.061129
# 2020-10-02  0.773936 -1.944398 -1.952258  1.135505
# 2020-10-03 -1.715162  0.122924  0.416170  0.557903
# ....
# 2020-10-30 -0.293076  0.301969 -0.148113 -0.600654
print('# 每两天一个窗口，求平均数')
print(df.rolling(2).mean())
#                    A         B         C         D
# 2020-10-01       NaN       NaN       NaN       NaN
# 2020-10-02 -0.928327  0.950067  0.941985  0.220288
# 2020-10-03 -0.572597  0.059254 -0.402167 -0.969063
# ...
# 2020-10-30 -0.278189  0.891837  1.601555 -0.751876

'''
我们使用时间偏移作为周期，2D代表两天，与上例相同，
不过，使用时间偏移的话，默认的最小观察数据为1，所以第一天也是有数据的，即它自身：
'''
print('# 每两天一个窗口，求平均数')
print(df.rolling('2D').mean())
#                    A         B         C         D
# 2020-10-01 -0.160455 -0.385995 -0.083510 -0.047950
# 2020-10-02 -0.318638 -0.087972 -0.175445 -0.411212
# 2020-10-03  0.126216  1.035055  0.136721 -0.140395
# ...
# 2020-10-30  0.218113 -0.214285 -0.141040  0.825379

'''如果只对一指定列进行窗口计算，可用以下两个方法之一：'''
print('# 仅对A列进行窗口计算')
print(df.rolling('2D')['A'].mean())
print(df.A.rolling('2D').mean())  # 同上

# 2020-10-01    0.751548
# 2020-10-02    0.128525
# ...
# 2020-10-30    1.228998
# Freq: D, Name: A, dtype: float64

'''使用窗口函数时可以指定窗口类型，如汉明（Hamming）窗：'''
print('# 使用窗口函数，汉明窗')
print(df.rolling(2, win_type='hamming').sum())

#                    A         B         C         D
# 2020-10-01       NaN       NaN       NaN       NaN
# 2020-10-02  0.043914  0.021920 -0.056777  0.015278
# ...
# 2020-10-30  0.027101 -0.119280 -0.009099 -0.060454

print()
print('------------------------------------------------------------')
print('\t13.2.4 统计方法')

'''
窗口主要支持以下统计方法。
count()：非空值数
sum()：值的总和
mean()：平均值
median()：数值的算术中位数
min()：最小值
max()：最大值
std()：贝塞尔校正的样本标准偏差
var()：无偏方差
skew()：样本偏斜度（三阶矩）
kurt()：峰度样本（四阶矩）
quantile()：样本分位数（百分位上的值）
cov()：无偏协方差（二进制）
corr()：关联（二进制）

'''

print()
print('------------------------------------------------------------')
print('\t13.2.5 agg()')

'''
使用agg()可以调用多个函数，多列使用不同函数或者一列使用多个函数，如对窗口中的不同列使用不同的计算方法：
'''

print('# 对窗口中的不同列使用不同的计算方法')
print(df.rolling('2D').agg({'A': sum, 'B': np.std}))

#                    A         B
# 2020-10-01 -0.224801       NaN
# 2020-10-02 -1.207768  2.235446
# ...
# 2020-10-30 -0.846298  1.523351

print('# 对同一列使用多个函数')
print(df.A.rolling('2D').agg({'A_sum': sum, 'B_std': np.std}))

#                A_sum     B_std
# 2020-10-01  0.467737       NaN
# 2020-10-02  0.220993  0.505215
# ...
# 2020-10-30  1.190788  1.187549

print()
print('------------------------------------------------------------')
print('\t13.2.6 apply()')

'''apply()可以在窗口上实现自定义函数，要求应用此函数后产生一个
单一值，因为窗口计算后每个窗口产生的也是唯一值：'''

print('# 对窗口求和再加1，最终求绝对值')

print(df.rolling('2D').apply(lambda x: abs(sum(x) + 1)))
#                    A         B         C         D
# 2020-10-01  0.785234  0.481048  0.424229  0.513090
# 2020-10-02  1.487099  0.234810  0.170226  0.649228
# ...
# 2020-10-30  1.051135  0.597912  0.288842  0.243163

print()
print('------------------------------------------------------------')
print('\t13.2.7 扩展窗口')

'''
s.expanding()是Pandas扩展窗口的实现函数，在使用和功能上简单很多，使用逻辑与s.rolling()一样。
rolling()窗口大小固定，移动计算，而expanding()只设最小可计算数量，不固定窗口大小，不断扩展进行计算，
示例代码如下。

个人理解： 类似SQL中的sum() over()  累加函数
'''

# 原始数据
s = pd.Series(range(1, 7))
# print(s)
print('# 扩展窗口操作')
print(s.expanding(2).sum())
# 0     NaN
# 1     3.0
# 2     6.0
# 3    10.0
# 4    15.0
# 5    21.0
# dtype: float64

'''实际上，当rolling()函数的窗口大小参数window为len(df)时，最终效果与expanding()是一样的。'''

'''
13.2.8 小结
移动窗口函数rolling()和扩展窗口函数expanding()十分类似，不同点仅限于窗口大小是否固定。
rolling()更为常用，它提供了更为丰富的参数，可以指定非常多的窗口函数来实现复杂的计算。

13.3 本章小结
SQL提供了窗口函数用于数据的读取计算，本章介绍的Pandas的
rolling()和expanding()正是来解决同样的问题的。窗口计算在一些时序数
据处理分析方法中使用非常广泛，另外在理论研究方面也有诸多应用。
'''

